#!/usr/bin/python

import sys
import os

import exile

corrupt = 0

def pushObjectFor(file):
    global corrupt

    repo = exile.repoFor(file)
    if len(repo) is 0:
        print "No repository for '%s'" % (file)
        return

    # Attempt to resolve references
    if exile.isReference(file):
        exile.checkout(file, True)
        if exile.isReference(file):
            return

    hash = exile.hashObject(file)
    repodir = exile.rootDir() + os.sep + repo
    command = exile.GitConfigCommand(repo, 'put')
    object = repodir + os.sep + hash
    if os.path.exists(object):
        if os.path.basename(object) == exile.hashObject(object):
            print 'Pushing object for %s (%s)...' % (file, hash)
            vars = { 'LOCAL': object, 'REMOTE': hash }
            command.eval(vars)
        else:
            print "Object for %s (%s) appears to be corrupt. Skipping..." % (file, hash)
            corrupt += 1

exile.forEachSubtree(sys.argv[1:], pushObjectFor)

if corrupt is not 0:
    print "\nPush complete, but found %d corrupt objects." % (corrupt)
    print "Run 'git exile repair' to redownload these objects."
    sys.exit(1)
